https://leetcode.com/problems/shortest-distance-to-target-color/discuss/384822/Java-binary-search
class Solution {
    public List<Integer> shortestDistanceColorPRE(int[] colors, int[][] queries) {
        int dpleft[][]=new int[colors.length][3];
        int[] track=new int[]{Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE};
        for(int i=0;i<colors.length;i++){
            int c=colors[i]-1,a=(c-1+3)%3,b=(c+1+3)%3;
            dpleft[i][c]=0;
            if(i==0||dpleft[i-1][a]==Integer.MAX_VALUE)
                dpleft[i][a]=Integer.MAX_VALUE;
            else dpleft[i][a]=dpleft[i-1][a]+1;
            if(i==0||dpleft[i-1][b]==Integer.MAX_VALUE)
                dpleft[i][b]=Integer.MAX_VALUE;
            else dpleft[i][b]=dpleft[i-1][b]+1;
        }
        int dprt[][]=new int[colors.length][3];
        track=new int[]{Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE};
        for(int i=colors.length-1;i>=0;i--){
            int c=colors[i]-1,a=(c-1+3)%3,b=(c+1+3)%3;
            dprt[i][c]=0;
            if(i==colors.length-1||dprt[i+1][a]==Integer.MAX_VALUE)
                dprt[i][a]=Integer.MAX_VALUE;
            else dprt[i][a]=dprt[i+1][a]+1;
            if(i==colors.length-1||dprt[i+1][b]==Integer.MAX_VALUE)
                dprt[i][b]=Integer.MAX_VALUE;
            else dprt[i][b]=dprt[i+1][b]+1;
        }
        List<Integer> res=new LinkedList<>();
        for(int i=0;i<queries.length;i++){
            int ind=queries[i][0],c=queries[i][1]-1;
            int v=Math.min(dpleft[ind][c],dprt[ind][c]);
            if(v==Integer.MAX_VALUE)
                v=-1;
            res.add(v);
        }
        return res;
    }
    
    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {
        HashMap<Integer,TreeSet<Integer>> hm = new HashMap<>();
        for(int i=0;i<colors.length;i++){
            TreeSet<Integer> ts=hm.getOrDefault(colors[i],new TreeSet<Integer>());
            ts.add(i);
            hm.put(colors[i],ts);
        }
        List<Integer> res=new LinkedList<>();
        for(int i=0;i<queries.length;i++){
            int ind=queries[i][0],c=queries[i][1];
            int v=-1;
            if(hm.containsKey(c)){
                TreeSet<Integer> ts=hm.get(c);
                Integer a=Integer.MAX_VALUE,b=a;
                a=ts.floor(ind);
                if(a!=null)
                    a=Math.abs(ind-a);
                else a=Integer.MAX_VALUE;
                b=ts.ceiling(ind);
                if(b!=null)
                    b=Math.abs(ind-b);
                else b=Integer.MAX_VALUE;
                v=Math.min(a,b);
                if(v==Integer.MAX_VALUE)
                    v=-1;
            }
            res.add(v);
        }
        return res;
    }
}
