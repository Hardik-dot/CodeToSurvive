class Solution {
    int[][] vis;
    int n=0,m=0;
    public int getneigh(int[][] board,int i, int j) {
        int v=0;
        if(i>0){
            if(j>0)
                v=v+board[i-1][j-1];
            v=v+board[i-1][j];
            if(j<m-1)
                v=v+board[i-1][j+1];
        }

        if(j>0)
            v=v+board[i][j-1];

        if(j<m-1)
            v=v+board[i][j+1];       

        if(i<n-1){
            if(j>0)
                v=v+board[i+1][j-1];
            v=v+board[i+1][j];
            if(j<m-1)
                v=v+board[i+1][j+1];
        }
        return v;
    }
    
    public void aux(int[][] board,int i,int j) {
        if(i<0||j<0||i>=n||j>=m||vis[i][j]==1)
            return;
        int v = getneigh(board,i,j);
        vis[i][j]=1;
        
        aux(board,i-1,j-1);
        aux(board,i-1,j);
        aux(board,i-1,j+1);
        aux(board,i,j-1);
        aux(board,i,j+1);
        aux(board,i+1,j-1);
        aux(board,i+1,j);
        aux(board,i+1,j+1);
        
        if(board[i][j]==0&&v==3)
            board[i][j]=1;
        else if(board[i][j]==1){
            if(v<2||v>3)
                board[i][j]=0;
            
        }
    }
    
    public void gameOfLife(int[][] board) { //in-place
        n=board.length;m=board[0].length;
        vis = new int[n][m];
        
        aux(board,0,0);
        
    }
    
    public void gameOfLifespace(int[][] board) { //new array
        n=board.length;m=board[0].length;
        int[][] res = new int[n][m];
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int v=getneigh(board,i,j);
                if(board[i][j]==0&&v==3)
                    res[i][j]=1;
                else if(board[i][j]==1){
                    if(v==2||v==3)
                        res[i][j]=1;
                }
            }
        }
        
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                board[i][j]=res[i][j];
                
    }
}
