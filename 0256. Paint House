class Solution {
    int cst[][];
    int dp[][];
    //recurr
    public int aux(int ind,int ic){
        if(ic>=cst.length)
            return 0;
        int m = Integer.MAX_VALUE;

        if(ind!=0)  {
            if(dp[ic][0]==0)
                dp[ic][0] = aux(0,ic+1)+cst[ic][0];
        }
        if(ind!=1)  {
            if(dp[ic][1]==0)
                dp[ic][1] = aux(1,ic+1)+cst[ic][1];
        }
        if(ind!=2)  {
            if(dp[ic][2]==0)
                dp[ic][2] = aux(2,ic+1)+cst[ic][2];
        }
        if(ind==0)
            m = Math.min(dp[ic][1],dp[ic][2]);
        else if(ind==1)
            m = Math.min(dp[ic][0],dp[ic][2]);
        else if(ind==2)
            m = Math.min(dp[ic][1],dp[ic][0]);
        
        return m;
    }
    
    
    
    public int minCost(int[][] costs) {
        /* recursive
        this.cst = costs;
        dp = new int[cst.length][3];
        if(costs.length==0) return 0;
        int m = Integer.MAX_VALUE;
        m = Math.min(aux(0,1)+cst[0][0],m);
        m = Math.min(aux(1,1)+cst[0][1],m);
        m = Math.min(aux(2,1)+cst[0][2],m);
        return m;*/
        
        //iterative
        if(costs.length==0) return 0;
        for(int i=1;i<costs.length;i++){
            costs[i][0]+=Math.min(costs[i-1][1],costs[i-1][2]);
            costs[i][1]+=Math.min(costs[i-1][0],costs[i-1][2]);
            costs[i][2]+=Math.min(costs[i-1][1],costs[i-1][0]);
        }
        return Math.min(costs[costs.length-1][0],Math.min(costs[costs.length-1][1],costs[costs.length-1][2]));
    }
}
