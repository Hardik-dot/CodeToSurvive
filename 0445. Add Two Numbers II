/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    private String addStrings(String num1, String num2) {
        StringBuilder ans=new StringBuilder();
        int i=num1.length()-1,j=num2.length()-1,c=0;
        char[] n1=num1.toCharArray(),n2=num2.toCharArray();
        while(i>=0&&j>=0){
            int t=n1[i--]-'0'+n2[j--]-'0'+c;
            int r=t%10;c=t/10;
            ans.append(r);
        }
        while(i>=0){
            int t=n1[i--]-'0'+c;
            int r=t%10;c=t/10;
            ans.append(r);
        }
        while(j>=0){
            int t=n2[j--]-'0'+c;
            int r=t%10;c=t/10;
            ans.append(r);
        }
        if(c!=0)
            ans.append(c);
        return ans.reverse().toString();
    }
    private String tostr(ListNode l){
        StringBuilder res=new StringBuilder();
        while(l!=null){
            res.append(l.val);
            l=l.next;
        }
        
        return res.toString();
    }
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        char[] r=addStrings(tostr(l1),tostr(l2)).toCharArray();
        
        ListNode res=new ListNode();
        ListNode curr=res;
        for(char c:r){
            ListNode tmp=new ListNode(c-'0');
            curr.next=tmp;
            curr=curr.next;
        }
        return res.next;
        
    }
}
