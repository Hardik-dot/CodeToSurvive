class Solution {
    int res[];
    int dp[][];
    public int compa(String a, String b){
        for(int i=0;i<b.length();i++){
            String sb= b.substring(0,i)+b.substring(i+1,b.length());
            if(a.equals(sb))
                return 1;
        }
        return -1;
    }
    
    public int aux(int ix,String[] words){
        int v=0;
        if(res[ix]!=0)
            return res[ix];
        for(int i=ix+1;i<words.length;i++){
            if(words[i].length()-words[ix].length()>1)
                break;
            if(dp[ix][i]==0)
                dp[ix][i]=compa(words[ix],words[i]);
            if(dp[ix][i]==1)
                v=Math.max(v,aux(i,words)+1);
        }
        res[ix]=v;
        return v;
    }
    
    public int longestStrChain(String[] words) {
        Arrays.sort(words,(a,b)->(a.length()-b.length()));
        dp=new int[words.length][words.length];
        res=new int[words.length];
        int v=1;
        for(int i=0;i<words.length;i++)
            v=Math.max(aux(i,words)+1,v);
        
        return v;
    }
}
