class Solution {
    
    public int aux(int[] arr, int dif, int dp[],int i){//dp 1
        if(dp[i]!=-1)
            return dp[i];
        
        int j=i+1;
        while(j<arr.length&&arr[j]-arr[i]!=dif)
            j++;
        if(j==arr.length)
            dp[i]=0;
        else
            dp[i]= 1+aux(arr,dif,dp,j);
        return dp[i];
    }
    
    public int longestSubsequencedp1(int[] arr, int dif) {
        int v=0;
        int dp[]=new int[arr.length];
        Arrays.fill(dp,-1);
        for(int i=0;i<arr.length;i++){
            if(dp[i]==-1){
                dp[i]=aux(arr,dif,dp,i)+1;
                v=Math.max(dp[i],v);
            }
        }
        return v;
    }
    
    public int longestSubsequence(int[] arr, int dif) {
        HashMap<Integer,Integer> hm = new HashMap<>();
        int res=1;
        for(int i:arr){
            int v=hm.getOrDefault(i-dif,0);
            res=Math.max(v+1,res);
            hm.put(i,v+1);
        }
        return res;
    }
}
