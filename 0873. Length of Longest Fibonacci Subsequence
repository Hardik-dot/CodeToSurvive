class Solution {  
    public int lenLongestFibSubseqITERATIVE(int[] arr) { /73ms
        HashSet<Integer> hs = new HashSet<>();
        
        for(int i:arr)
            hs.add(i);
        
        int r=0;
        for(int i=0;i<arr.length;i++){
            for(int j=i+1;j<arr.length;j++){
                int pre=arr[i],cu=arr[j],t=0;
                while(hs.contains(pre+cu)){
                    t++;
                    cu=pre+cu;
                    pre=cu-pre;
                }
                if(t!=0)
                r=Math.max(r,t+2);
            }
        }
        
        return r;
    }
    
    
        public int aux(int[] arr,HashSet<Integer> hs, int ix,int cu,int pre){
        int r=0;
        if(hs.contains(cu+pre)){
            int t=1+aux(arr,hs,ix,cu+pre,cu);
            r=Math.max(r,t);
        }

        return r;
    }
    
    public int lenLongestFibSubseqRECUR(int[] arr) {
        HashSet<Integer> hs = new HashSet<>();
        
        for(int i:arr)
            hs.add(i);
        
        int r=0;
        for(int i=0;i<arr.length;i++){
            for(int j=i+1;j<arr.length;j++){
                if(hs.contains(arr[i]+arr[j])){
                    int t = aux(arr,hs,j,arr[j],arr[i])+2;
                    r=Math.max(r,t);
                }
            }
        }
        
        return r;
    }
}
