/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        Queue<Node> qu=new LinkedList<>();
        if(root==null)
            return root;
        qu.add(root);
        qu.add(null);
        while(!qu.isEmpty()){
            Node curr=qu.poll();
            if(curr==null){
                if(qu.isEmpty())
                    break;
                qu.add(null);
                continue;
            }
            Node nxt=qu.peek();
            if(nxt!=null)
                curr.next=nxt;
            if(curr.left!=null)
            qu.add(curr.left);
            if(curr.right!=null)
            qu.add(curr.right);
        }
        return root;
    }
}
