class Solution {
    public boolean isaux(char[][] board,int ix,int jx){
        HashSet<Integer> hs = new HashSet<>();
        for(int i=ix;i<ix+3;i++){
            for(int j=jx;j<jx+3;j++){
                if(board[i][j]!='.'&&hs.contains(board[i][j]-'0'))
                    return true;
                else hs.add(board[i][j]-'0');
            }    
        }    
        return false;
    }
    
    public boolean isValidSudokua(char[][] board) {
        HashSet<Integer> hs = new HashSet<>();
        HashSet<Integer> rx = new HashSet<>();
        for(int i=0;i<9;i++){
            hs = new HashSet<>();
            rx = new HashSet<>();
            for(int j=0;j<9;j++){
                if(board[i][j]!='.'&&hs.contains(board[i][j]-'0'))
                    return false;
                else
                    hs.add(board[i][j]-'0');
                if(board[j][i]!='.'&&rx.contains(board[j][i]-'0'))
                    return false;
                else
                    rx.add(board[j][i]-'0');
            }
        }
        
        for(int i=0;i<9;i=i+3){
            if(isaux(board,i,0)||isaux(board,i,3)||isaux(board,i,6)){
                return false;
            }
        }
        return true;
    }
    
    public boolean isValidSudoku(char[][] board) {
        HashSet<Integer> [] rows = new HashSet[9];
        HashSet<Integer> [] columns = new HashSet[9];
        HashSet<Integer> [] boxes = new HashSet[9];
        for (int i = 0; i < 9; i++) {
            rows[i] = new HashSet<>();
            columns[i] = new HashSet<>();
            boxes[i] = new HashSet<>();
        }
        
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                int boxit=(i/3)*3+j/3;
                if(board[i][j]!='.'){
                    if(boxes[boxit].contains(board[i][j]-'0')||rows[i].contains(board[i][j]-'0')||columns[j].contains(board[i][j]-'0'))
                        return false;
                    boxes[boxit].add(board[i][j]-'0');
                    rows[i].add(board[i][j]-'0');
                    columns[j].add(board[i][j]-'0');
                }
            }
        }
        return true;
    }
}
