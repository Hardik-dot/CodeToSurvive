//https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals/discuss/686335/JavaPython-3-Greedy-Alg.%3A-3-methods-from-O(nlogn)-to-O(n)-w-brief-explanation-and-analysis.
class Solution {
    
    public int[][] frequencySort(int[] nums) {
        int uni=0;
        HashMap<Integer,Integer> hm = new HashMap<>();
        
        for(int i:nums){
            int v=0;
            if(hm.containsKey(i))
                v=hm.get(i);
            hm.put(i,v+1);
        }
        
        int arr[][]=new int[hm.size()][2];
        int ix=0;
        for (Map.Entry<Integer,Integer> entry : hm.entrySet())  {
            arr[ix][0]= entry.getKey();
            arr[ix][1]= entry.getValue(); 
            ix++;
        }
        
        Arrays.sort(arr, (a,b) -> a[1]==b[1] ? b[0]-a[0] : a[1]-b[1]);
        
        return arr;
    }
    
    public int findLeastNumOfUniqueInts(int[] arr, int k) {
        int[][] tp = frequencySort(arr);
        int ix=0;
        while(ix<tp.length){
            if(k-tp[ix][1]>=0)
                k-=tp[ix][1];
            else 
                break;
            ix++;
        }
        int vx = tp.length;
        return vx-ix;
    }
}
