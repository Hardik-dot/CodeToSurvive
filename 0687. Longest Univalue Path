/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ct=0;
    public int aux(TreeNode root,int v){
        if(root==null){
            root=new TreeNode(1010);
            return 0;
        }
        int a=0,b=0;
        if(root.left==null)
            root.left=new TreeNode(1010);
        else
            a=aux(root.left,root.val);
        
        if(root.right==null)
            root.right=new TreeNode(1010);
        else
            b=aux(root.right,root.val);
            
        if(root.val!=v){
            if(root.val==root.left.val&&root.val==root.right.val){
                ct=Math.max(ct,a+b+2);
            }else if(root.val==root.left.val)
                ct=Math.max(ct,a+1);
            else if(root.val==root.right.val)
                ct=Math.max(ct,b+1);
            return 0;
        }
        int vx=0;
        if(root.val==root.left.val&&root.val==root.right.val){
            vx=Math.max(vx,Math.max(a+1,b+1));
            ct=Math.max(ct,a+b+2);
        }else if(root.val==root.left.val)
            vx=Math.max(vx,a+1);
        else if(root.val==root.right.val)
            vx=Math.max(vx,b+1);
        ct=Math.max(ct,vx);
        return vx;          
    }
    
    
    public int longestUnivaluePath(TreeNode root) {
        aux(root,1001);
        return ct;
    }
}
