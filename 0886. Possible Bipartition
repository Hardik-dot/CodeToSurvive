class Solution {
    
    public boolean aux(int i,List<Integer> dp,int N,Set<Integer> l1,Set<Integer> l2,Stack<Integer> st){
        for(int k=0;k<dp.size();k++){
            int j=dp.get(k);
            if((l1.contains(i)&&l2.contains(j))||(l2.contains(i)&&l1.contains(j)))
                continue;
            if((l1.contains(i)&&l1.contains(j))||(l2.contains(i)&&l2.contains(j)))
                return false;
            if(l1.contains(i)&&!l2.contains(j))
                l2.add(j);
            else if(l2.contains(i)&&!l1.contains(j))
                l1.add(j);
            else if(l1.contains(j)&&!l2.contains(i))
                l2.add(i);
            else if(l2.contains(j)&&!l1.contains(i))
                l1.add(i);
            else{
                l1.add(i);
                l2.add(j);
            }
            st.add(j);
        }
        return true;
    }
    
    public boolean possibleBipartition(int N, int[][] dis) {
        HashMap<Integer, List<Integer>> dp=new HashMap<>();
        int ix=2001;
        HashSet<Integer> hs = new HashSet<>();
        for(int i=0;i<dis.length;i++){
            int a=dis[i][0],b=dis[i][1];
            
            List<Integer> li=dp.getOrDefault(a,new ArrayList<>());
            li.add(b);
            dp.put(a,li);
            
            li=dp.getOrDefault(b,new ArrayList<>());
            li.add(a);
            dp.put(b,li);
            
            hs.add(a);
            if(a<ix)
                ix=a;
        }
        
        Stack<Integer> st=new Stack<Integer>();
        st.add(ix);
        Set<Integer> l1=new HashSet<>(),l2=new HashSet<>();
        
        while(st.size()>0){
            int i=st.pop();
            if(hs.contains(i)){
                hs.remove(i);
                if(!aux(i,dp.get(i),N,l1,l2,st))
                    return false;
            }
        }
        
        Iterator it = hs.iterator();
        while(it.hasNext()){
            int i=(int)it.next();
            if(!aux(i,dp.get(i),N,l1,l2,st))
                return false;
        }
        return true;
    }
}
