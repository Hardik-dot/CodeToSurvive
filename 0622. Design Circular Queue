class MyCircularQueue {
    int arr[];
    int l=-1,r=-1,ct=0,nk=0;
    public MyCircularQueue(int k) {
        arr=new int[k];
        l=0;r=-1;ct=0;nk=k;
    }
    
    public boolean enQueue(int value) {
        if(isFull())
            return false;
        r=(r+1)%nk;
        arr[r]=value;
        ct++;
        return true;
    }
    
    public boolean deQueue() {
        if(isEmpty())
            return false;
        l=(l+1)%nk; //doubt x
        ct--;
        return true;
    }
    
    public int Front() {
        if(isEmpty())
            return -1;
        return arr[l];
    }
    
    public int Rear() {
        if(isEmpty())
            return -1;
        return arr[r];
    }
    
    public boolean isEmpty() {
        if(ct==0)
            return true;
        return false;
    }
    
    public boolean isFull() {
        if(ct==nk)
            return true;
        return false;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
