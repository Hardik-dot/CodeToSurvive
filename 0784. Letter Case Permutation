class Solution {
    HashSet<String> hs= new HashSet<>();
    List<String> res=new LinkedList<>();
    public void aux(String s, StringBuilder sb,int idx){
        if(idx==s.length()){
            if(!hs.contains(sb.toString())){
                hs.add(sb.toString());
                res.add(sb.toString());   
            }
            return;
        }
        if(s.charAt(idx)<65){
            sb.append(s.charAt(idx));
            aux(s,sb,idx+1);
            sb.setLength(sb.length()-1);
        }else if(s.charAt(idx)<97){
            sb.append(s.charAt(idx));
            aux(s,sb,idx+1);
            sb.setLength(sb.length()-1);
            char v=(char)(s.charAt(idx)+'a'-'A');
            sb.append(v);
            aux(s,sb,idx+1);
            sb.setLength(sb.length()-1);
        }else{
            sb.append(s.charAt(idx));
            aux(s,sb,idx+1);
            sb.setLength(sb.length()-1);
            char v=(char)(s.charAt(idx)-'a'+'A');
            sb.append(v);
            aux(s,sb,idx+1);
            sb.setLength(sb.length()-1);
        }
    }
    
    public List<String> letterCasePermutation(String S) {
        
        aux(S,new StringBuilder(),0);
        return res;
    }
}
