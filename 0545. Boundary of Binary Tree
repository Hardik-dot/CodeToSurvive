/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> lix = new ArrayList<>();
    List<Integer> lefty=new ArrayList<>();
    List<Integer> righty=new ArrayList<>();
    public void aux(TreeNode root, int lvl) {
        if(root==null)
            return;
        if(root.left==null&root.right==null&&lvl!=0){
            lix.add(root.val);return;
        }
        aux(root.left,lvl+1);
        aux(root.right,lvl+1);
        return;
    }
    
    public void auxleft(TreeNode root, int lvl) {
        if(root==null)
            return;
        lefty.add(root.val);
        if(root.left!=null)
        auxleft(root.left,lvl+1);
        else
        auxleft(root.right,lvl+1);
        return;
    }
    
    public void auxright(TreeNode root, int lvl) {
        if(root==null)
            return;
        righty.add(root.val);
        if(root.right==null)
        auxright(root.left,lvl+1);
        else
        auxright(root.right,lvl+1);
        return;
    }
    
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
        aux(root,0);
        List<Integer> rest=new ArrayList<>();
        
        // root
        rest.add(root.val);
        
        //left
        auxleft(root.left,0);
        for(int i=0;i<lefty.size()-1;i++){
            rest.add(lefty.get(i));
        }
        
        //leaf
        for(int j=0;j<lix.size();j++)
            rest.add(lix.get(j));
        
        //right
        auxright(root.right,0);
        for(int i=righty.size()-2;i>=0;i--){
            rest.add(righty.get(i));
        }
        return rest;
    }
}
